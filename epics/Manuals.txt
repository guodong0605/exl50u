1、打开github网址：（https://github.com/channelaccess/ca/blob/master/README_MATLAB.md），该网址提供了channelaccess/ca针对MATLAB的通道连接说明；
2、下载最新版本的ca包（点击蓝色的here按钮），网页跳转到（https://github.com/channelaccess/ca/releases），下载（ca-1.3.2-all.jar）ca包
3、由于ca需要Java 8或更高版本，请确保你的Matlab版本运行的是Java 8或更高版本（从Matlab2019a开始就是这种情况），或者你把你的Matlab指向一个合适的Java版本；
4、有两个选项来使用这个库，一个是动态的，一个是静态的。使用动态选项，你将把库与你的Matlab代码捆绑在一起，而使用静态选项，你将为你的Matlab实例一次性地设置库；
5、强烈建议使用动态方法；
6、动态方法的配置
6.1 将下载的jar文件复制到存放Matlab代码文件的文件夹中；
6.2 在.m文件的顶部添加下面一行代码
    javaaddpath('ca-1.3.2-all.jar')；
6.3 在同一工作区中被多次执行该.m文件；
6.4 使用以下结构来摆脱Matlab关于重新添加到classpath的警告；
    if not(exist('java_classpath_set'))
		javaaddpath('ca-1.3.2-all.jar')
		java_classpath_set = 1;
    end
6.5 在更复杂的Matlab项目中，你可能想把库放在一个子/父文件夹中。在这种情况下，使用相对路径来引用该库,代码如下所示；
    javaaddpath('../ca-1.3.2-all.jar')
	注意：对于Windows用户来说，记住要使用反斜线
7、静态方法配置
7.1 在Matlab主文件夹下的javaclasspath.txt中包含jar的完整限定路径（最好也把jar复制到这个目录中）。比如说：
    /some/location/MATLAB/ca-1.3.2-all.jar
    在创建/修改javaclasspath.txt文件后，需要重新启动Matlab。
8、使用方法
8.1 环境变量
8.1.1 环境变量对于创建通道是必要的。理想情况下，每个Matlab应用程序应该只有一个环境变量，相应的代码如下：
      import org.epics.ca.*
      context = Context();
8.1.2 也可通过Properties的方法设置环境变量，相应的代码如下：
      import org.epics.ca.*
	  properties = java.util.Properties();
	  properties.setProperty('EPICS_CA_ADDR_LIST', '10.0.0.255');

	  context = Context(properties);
8.1.3 目前以下Properties支持
8.1.4 在应用结束后环境变量需要关闭，可以通过以下代码：
      context.close();
8.2 通道
8.2.1 利用Channels utility class的create函数创建通道，create函数的输入可以是简单的通道名称，也可以描述通道名称、类型、监测与否等，下面给出了几个创建通道的例子：
	  % Easiest and preferred way
	  channel = Channels.create(context, 'ARIDI-PCT:CURRENT');

	  % Explicitly define type
	  channel = Channels.create(context, ChannelDescriptor('ARIDI-PCT:CURRENT', java.lang.Double(0).getClass()));

	  % Create monitored double channel
	  channel = Channels.create(context, ChannelDescriptor('ARIDI-PCT:CURRENT', java.lang.Double(0).getClass(), true));
	  通道创建完成之后就可以读取通道内的数值，也可以向通道内输入数值
	  注意：如果您创建的通道的监控标志设置为true，则get()不会访问网络以获取通道的最新值，而是返回通道监控器的最新更新。如果您需要通过网络显式获取值，请使用get(true)（这应该很少使用，因为大多数时候它足以获取缓存的值）
