% 2024-03-01 磁测量诊断标定   查看线圈电流参数
parameter(1700,-2,5,{{'ps1_exp','ipf02','ipf03','ipf04','ipf05','ipf06','ipf07','ipf08','ipf09','ipf10'},{'itf01'},{'cs_exp'},{'ip'}},1e3);
mpProfile(1706,1.65,1.7)
downloaddata(1706,'mp001-9n','-3:5:1e-2',2,0);
downloaddata(1704,'mp001-9n','-3:5:1e-2',2,0);
downloaddata(1706,'ps1-10_exp','-3:5:1e-2',2,0);
downloaddata(1704,'mp010-20t','-3:5:1e-2',2,0);
%%
for shotnum=1366:1565
    try
        downloaddata(shotnum,'cs_exp,itf01,ps1-10_exp','-3:5:1e-2',2,0);
        fig=gcf;
        filename=num2str(shotnum);
        print(fig, fullfile('E:\01 磁测量诊断\实验记录\CS电流\', filename), '-djpeg');
        close all
    end
end
%%
shotnum=1705;
filepath='E:\git\exl50u\diagnostics\emd\data\EXL50UProbeFluxLoop.xlsx';
FluxParameter=readtable(filepath,'Sheet','flux','VariableNamingRule','preserve');

fluxs='ps1-10_exp';
fluxNames = extractMultipleStrings(fluxs);
OutputParam=zeros(numel(fluxNames),3);
for i=1:numel(fluxNames)
    fluxCoilName=fluxNames{i};
    matches = regexp(fluxCoilName, '\d+', 'match');
    numbers = str2double(matches);
    fluxParam.X=table2array(FluxParameter(numbers,2))/1e3;
    fluxParam.Z=table2array(FluxParameter(numbers,3))/1e3;
    fluxParam.K=table2array(FluxParameter(numbers,4));
    initialParams = [fluxParam.X, fluxParam.Z, fluxParam.K];
    lb = [fluxParam.X-0.05, fluxParam.Z-0.05, fluxParam.K-0.02]; % 注意这里的减号修正
    ub = [fluxParam.X+0.05, fluxParam.Z+0.05, fluxParam.K+0.02];

    % 调用fmincon
    options = optimoptions('fmincon', 'Algorithm', 'sqp', 'Display', 'iter');
    [optimalParams, fval] = fmincon(@(params)FluxError(shotnum, fluxCoilName,params, 1.8), initialParams, [], [], [], [], lb, ub, [], options);
    OutputParam(i,:)=optimalParams;
    % 输出优化结果
    fprintf('优化后的探测器位置和角度：X = %f, Z = %f, Theta = %f\n', optimalParams(1), optimalParams(2), optimalParams(3));
end

%%
%单位电流 1kA时各线圈产生的磁通和磁场
coils='pf15,pf1-14';
coilNames = extractMultipleStrings(coils);
Flux=zeros(numel(coilNames),47);
Bt=zeros(numel(coilNames),52);
Br=zeros(numel(coilNames),48);
a=coilField;
for i=1:numel(coilNames)
    flux=a.getPFflux(coilNames{i});
    bt=a.getPFbt(coilNames{i},1,9,9,0);
    br=a.getPFbr(coilNames{i},1,9,9,0);
    Flux(i,:)=flux;
    Bt(i,:)=bt;
    Br(i,:)=br;
    coilname{i}=coilNames{i};
end
coilData.flux=Flux;
coilData.bt=Bt;
coilData.br=Br;
coilData.coilname=coilname;
coilData.fluxUnit='Wb/kA';
coilData.btUnit='T/kA';
coilData.brUnit='T/kA';
save("E:\git\exl50u\diagnostics\emd\data\coilData.mat","coilData")
%%
%
%  PREFORMATTED
%  TEXT
%
%%
filename='C:\Users\Administrator\Desktop\calibration\cal.xlsx';
shotnum=2101;
Ratio=mpProfile(shotnum,0,0.05);
writeData(filename,'flux',[shotnum,Ratio.flux],'A')
writeData(filename,'br',[shotnum,Ratio.br],'A')
writeData(filename,'bt',[shotnum,Ratio.bt],'A')
%%
fluxData=readtable(filename,'Sheet','br','ReadRowNames',true);
seprateData=fluxData(2:11,2:49);
fluxdata2=table2array(seprateData);
%%
filename='C:\Users\Administrator\Desktop\calibration\cal.xlsx';
fluxData=readtable(filename,'Sheet','flux','ReadRowNames',true);
seprateData=fluxData(2:11,2:49);
fluxdata2=table2array(seprateData);

num=size(fluxdata2,2)-1;
for i=1:size(fluxdata2,1)
    if i==1
        figure;stackplot({{1:num,fluxdata2(i,2:end),'Flux001'}},'Calibration','No',1)
    else
        hold on;
        plot(1:num,fluxdata2(i,2:end),'-o','LineWidth',2,'MarkerFaceColor',colors(i,:),'MarkerEdgeColor',colors(i,:));
    end
end
legend({'PF05','PF09','PF06','PF09','PF09','PF01','PF07','PF08','PF03','PF04'})
%%
[y,t,data]=downloaddata(2101,'itf01,ps1-10_exp','-3:5:1e-2',2,0);
%%
% DataChns='IP,LoopV,hcn_ne001,ecrh0_uk,CS_EXP,i_tf,AXUV006,SXR002,SXR004,IMP01,IMP02,IMP04,Ha001,HA002,HXR001,HXR002,mp006t';
DataChns={'IP','LoopV','hcn_ne001','ecrh0_uk','CS_EXP','i_tf','AXUV006','SXR002,SXR004','IMP01,IMP02,IMP04','Ha001,HA002','HXR001,HXR002'};


[y,t,data]=downloaddata(2276,DataChns,'-1:5:1e-3',0,0);
fieldNames = fieldnames(data);
t=t(1:end-1);
data1={[t,y(:,1)],[t,y(:,2)],'IP(kA),LoopV(V)'};
data2={[t,y(:,3),y(:,4)],'ITF(kA),CS(kA)'};
data3={[t,y(:,5),y(:,6)],'AXUV04,AXUV06'};
data4={[t,y(:,7),y(:,8)],'SXR02,SXR04'};
data5={[t,y(:,9),y(:,10),y(:,11)],'CII,HEII,OII'};
data6={[t,y(:,12),y(:,13)],'HA001,HA002'};
data7={[t,y(:,14),y(:,15)],'HXR01,HXR02'};
data8={[t,y(:,16)],'MP006T'};

dataset={data1,data2,data3,data4,data5,data6,data7,data8};

colomnPlot(dataset,3)
%%
B_X=comsol(:,2);
B_Y=comsol(:,1);
theta_br=comsol(:,3)/180*pi;
figure;stackplot({{1:48,B_X,B_Y,'B_X,B_Y'}},'','',1)

Br=B_Y.*cos(theta_br)-B_X.*sin(theta_br); % PF contribution
figure;stackplot({{1:48,Br,''}},'','',1)
%%
%%
filename='C:\Users\Administrator\Desktop\calibration\cal.xlsx';
fluxData=readtable(filename,'Sheet','flux','ReadRowNames',true);
seprateData=fluxData(2:9,3:49);

fluxdata2=table2array(seprateData);

num=size(fluxdata2,1);
for i=1:size(fluxdata2,2)
    if i==1
        figure;stackplot({{1:num,fluxdata2(:,i),'Flux001'}},'Calibration','No',1)
    else
        hold on;
        plot(1:num,fluxdata2(:,i),'-o','LineWidth',2,'MarkerFaceColor',colors(i,:),'MarkerEdgeColor',colors(i,:));
    end
end

xticks([1:num]);
textContent=table2cell(fluxData(2:9,1));

xticklabels(textContent);
%%
f1=parameter(2530,-7,5,{{'ip'},{'i_cs','i_tf'},{'i_PF7','I_PF8'},{'mp029t','mp040t'}});
autoYLim(f1)
%%
parameter(2530,-7,5,{{'ip'},{'i_cs,i_tf','ICS(kA),ITF(kA)'}})
manyshots('2486:2495', 'ip01,i_tf,i_cs,i_pf7',-3,5)
%%
% 用线圈电流测量的电流值和磁探针等输出的电压值进行标定输出
clear
filepath='E:\git\exl50u\diagnostics\emd\data\emdCalibration.xlsx';
shotnum=2607;
num=14;
[k,flux,mpt,mpn]=emdCalibration(shotnum,0.2,0.4,num);
[fluxData,t]=downloaddata(shotnum,'flux033','-7:5:1e-3',1,1);
pfData=downloaddata(shotnum,'itf01','-7:5:1e-3',1,1);
figure('Color',[1 1 1]);stackplot({{t,fluxData,pfData*k.flux(33),'Flux033,PF1'},{t,fluxData-pfData*k.flux(33),'Flux-PF*k'}},num2str(shotnum),'Time(s)',0)
%%
fluxRows=['B',num2str(num+1),':AV',num2str(num+1)];
mptRows=['B',num2str(num+1),':BA',num2str(num+1)];
mpnRows=['B',num2str(num+1),':AW',num2str(num+1)];
writematrix(k.flux, filepath, 'Sheet', 'flux', 'Range', fluxRows);
writematrix(k.mpt, filepath, 'Sheet', 'mpt', 'Range', mptRows);
writematrix(k.mpn, filepath, 'Sheet', 'mpn', 'Range', mpnRows);
%%

coil=coilParam;
xCenter = coil.mprGeometry.XCenter; % 中心点X坐标
yCenter = coil.mprGeometry.ZCenter; % 中心点Y坐标
xLength = coil.mprGeometry.W; % X方向长度
yLength = coil.mprGeometry.H; % Y方向长度
xGridNum = 3; % X方向网格数
yGridNum = 7; % Y方向网格数
theta = coil.mprGeometry.Angle+90; % 旋转角度
isFig = 1; % 绘制图形

% 调用函数
[gridX, gridY] = generateGrid(xCenter, yCenter, xLength, yLength, xGridNum, yGridNum, theta, isFig);

%%
% 定义参数
xCenter = [1; -2];  % 中心点X坐标数组
yCenter = [1; -2];  % 中心点Y坐标数组
xLength = [2; 3];   % X方向长度数组
yLength = [4; 2];   % Y方向长度数组
theta = [30; -45];  % 旋转角度数组
xGridNum = 3;       % X方向网格数
yGridNum = 4;       % Y方向网格数
isFig = 1;          % 启用绘图

% 调用优化后的generateGrid函数
[gridX, gridY] = generateGrid(xCenter, yCenter, xLength, yLength, xGridNum, yGridNum, theta, isFig);
%%
parameter(3574,-2,6,{{'ip'},{'ecrh0_uk'},{'hcn_ne001'},{'i_cs'},{'gas_out01'},{'gas_pres01'},{'ha004'}});

set(gca, 'FontWeight', 'bold', 'FontSize', 13, 'LineWidth', 1.5, 'XMinorTick', 'on', 'YMinorTick', 'on','ticklength',[0.02 0.02],'Xgrid','on','Ygrid','on','Box','on')
manyshots('3563:3566', 'ip,i_cs,hcn_ne001,gas_pres01,gas_out01',-2,4)

manyshots('3566', 'ip,i_cs,hcn_ne001,gas_pres01,gas_out01,ha004',-2,4)
%%
[y1,t]=downloaddata(3646,'mir076','0:5:1e-5',0,0);
[y2,t]=downloaddata(3646,'mir081','0:5:1e-5',0,0);

figure('Color',[1 1 1]);[S,f,t] = aspectrogram(y,1e5,0.5,512,0,5,1);

[RR, f] = autoSpectrum(y1,1e5,512,2,3,1);

specdensity(y1,y2,512,10,1,1e5,100);

cspectrogram(y1, y2);

xsd(y1, y2, 1e5, 1024)
figure;autoSpectroscopy(y1,1e5,0.5,1024,0,5,1)
%%
fs = 1000;  % 采样频率 1000 Hz
t = 0:1/fs:10-1/fs;
x = cos(2*pi*30*t) + randn(size(t));  % 30 Hz的信号加上噪声
y = sin(2*pi*60*t) + randn(size(t));  % 60 Hz的信号加上噪声

window = hamming(256);  % 使用汉宁窗
noverlap = 128;  % 重叠128点
nfft = 512;  % FFT长度为512

[Pxy, f] = csd(x, y, window, noverlap, nfft, fs);  % 计算CSD
plot(f, abs(Pxy))  % 绘制互谱密度的幅度
xlabel('Frequency (Hz)')
ylabel('Magnitude')
title('Cross-Spectral Density')

%%
parameter(3803,-3,2,{{'i_pf1','i_pf3','i_pf5','i_pf7','i_pf9'},{'i_pf2','i_pf4','i_pf6','i_pf8','i_pf10'},{'i_tf'},{'ecrh0_uk'},{'i_cs'},{'ip02_h'}});
%%
shotnum=3744;
datatime='-1:2:1e-3';
[eddy,t]=eddycurrent(shotnum,datatime);

[loopv,~]= downloaddata(shotnum,'loopv',datatime,0,0);
[ne,tne]= downloaddata(shotnum,'hcn_ne001',datatime,0,0);
[ics,~]= downloaddata(shotnum,'i_cs',datatime,0,0);
[loopv,~]= downloaddata(shotnum,'loopv',datatime,0,0);
[ip,~]= downloaddata(shotnum,'ip',datatime,0,0);
[itf,t]= downloaddata(shotnum,'i_tf',datatime,0,0);
[ecrh,~]= downloaddata(shotnum,'ecrh0_uk',datatime,0,0);

[flux,tflux]=downloaddata(shotnum,'flux007',datatime,0,0);
flux=flux*0.0795;
loopIn=gradient(flux)*1e3;


figure('Color',[1 1 1]);stackplot({{t,-smooth(loopIn./eddy*1e3,20),'uΩ'},{t,ip,-eddy,'IP(kA),I_eddy(kA)'},{t,ics/1e3,'I_CS(kA)'},{t,-loopv,smooth(loopIn,20),'V_out,V_in'}},num2str(shotnum))
% figure('Color',[1 1 1]);stackplot({{t,ipf(:,1),ipf(:,2),ipf(:,3),'IPF3(kA),IPF5(kA),IPF7(kA)'},{t,ip,-eddy,'IP(kA),I_eddy(kA)'},{t,ics/1e3,'I_CS(kA)'},{t,loopv,'loopv(V)'}},num2str(shotnum))
%%
component={{'inconel625',2*pi*260,8,2324},
    {'inconel625',2*pi*330,12,600},
    {'inconel625',2*pi*330,12,600},
    {'inconel625',2*pi*325,5,600},
    {'inconel625',2*pi*325,5,600},
    {'SS316L',2*pi*750,35,1500},
    {'SS316L',2*pi*750,35,1500},
    {'SS316L',2*pi*1410,30,620},
    {'SS316L',2*pi*1410,30,620},
    {'SS316L',2*pi*1655,20,2400}  };

%%
profile on   % 开启性能分析
filename= '\\192.168.20.29\EXL50-Camera\exl50u\IRC-S2-150\20240515\04153\04153.hcc';
[data, header] = readIRCam(filename, 'Frames', 1:10);
profile viewer  % 查看性能分析报告
profile off  % 关闭性能分析

%%
% 假设cameraParams是标定得到的相机参数对象
R = cameraParams.RotationMatrices(:,:,1); % 获取第一个视图的旋转矩阵
t = cameraParams.TranslationVectors(1,:); % 获取第一个视图的平移向量

% 计算相机光学中心到标定板的距离
distance = norm(t); % 计算平移向量的欧几里得范数
% 显示距离
disp(['相机光学中心到标定板的距离: ', num2str(distance), ' 单位: 标定板坐标系的单位']);




%%  处理0520 标定数据，把相对误差信息存到excel

excelFilePath = 'E:\git\exl50u\diagnostics\emd\data\1.xlsx';
shotnum = 4313;
t1 =1.305;
t2 =1.315;
error = mpProfile(shotnum, t1, t2);

% 获取数据
bt_data = error.bt;
br_data = error.br;
flux_data = error.flux;

% 写入数据到对应的Sheet表
writeDataToSheet(excelFilePath, 'bt', shotnum, bt_data);
writeDataToSheet(excelFilePath, 'br', shotnum, br_data);
writeDataToSheet(excelFilePath, 'flux', shotnum, flux_data);

disp('数据已成功写入Excel文件');
%%
data = [25 8 15 5 6 10 10 3 1 20 7];
plot(data)
pks = findpeaks(data)
%%
% 函数定义
% function writeDataToSheet(excelFilePath, sheetName, shotnum, data)
%     % 读取已有的数据
%     [~, ~, raw] = xlsread(excelFilePath, sheetName);
%
%     % 确定写入的起始行
%     if isempty(raw)
%         startRow = 2; % 如果表格为空，从第2行开始写（第1行为标题行）
%         xlswrite(excelFilePath, {'ShotNumber'}, sheetName, 'A1'); % 写入标题
%     else
%         startRow = size(raw, 1) + 1; % 追加到现有数据的下一行
%     end
%
%     % 写入炮号到第一列
%     xlswrite(excelFilePath, shotnum, sheetName, sprintf('A%d', startRow));
%
%     % 写入数据到从第二列开始的对应行
%     xlswrite(excelFilePath, data, sheetName, sprintf('B%d', startRow));
% end
%%
basePath = 'C:\Users\Administrator\Desktop\calibration';
fluxError=[];
mptError=[];
mpnError=[];
for i=1:16
    shotnum=table2array(info(i,1));
    t1=table2array(info(i,3));
    t2=table2array(info(i,4));
    
    coilname=string(info(i,2).VarName2);
    coilncurrent=table2array(info(i,5));
    temp=strjoin([coilname,num2str(coilncurrent)]);
    error = mpProfile(shotnum, t1, t2);

    fluxError(i,:)=error.flux;
    mptError(i,:)=error.bt;
    mpnError(i,:)=error.br;
    % 保存figure
    newFolder = fullfile(basePath,temp );
    if ~exist(newFolder, 'dir')
        mkdir(newFolder);
    end
    figures = findobj('Type', 'figure');
    figures = sort(figures);
    fileNames = {'mpt', 'mpn', 'flux', 'relative_error'};
    for i = 1:4
        fig = figures(i);
        saveas(fig, fullfile(newFolder, [fileNames{i}, '.fig']));
        saveas(fig, fullfile(newFolder, [fileNames{i}, '.png']));
    end
    close all

end
%%
% excelFilePath='C:\Users\Administrator\Desktop\calibration\磁测量标定0520.xlsx';
excelFilePath='E:\git\exl50u\diagnostics\emd\data\EXL50U coefficient.xlsx';
shotnum=4313;
t1=1.2;
t2=1.3;
Row = 23;
startCol = 'B'; % F列
rowname=[startCol,num2str(Row)];
[mpt_ratio,mpn_ratio,flux_ratio]=coilcalibration(shotnum,t1,t2,'i_pf8');
xlswrite(excelFilePath,flux_ratio, 'flux_coil', rowname); % 写入标题
xlswrite(excelFilePath,mpt_ratio, 'mpt_coil', rowname); % 写入标题
xlswrite(excelFilePath,mpn_ratio, 'mpn_coil', rowname); % 写入标题



